"""Tests for the py2glsl command-line interface."""

import os
from pathlib import Path
from tempfile import NamedTemporaryFile, TemporaryDirectory
from unittest.mock import patch

import pytest
from typer.testing import CliRunner

from py2glsl.main import app

# Set up the CLI runner
runner = CliRunner()


@pytest.fixture
def sample_shader_file():
    """Create a temporary shader file for testing."""
    with NamedTemporaryFile(suffix=".py", mode="w", delete=False) as f:
        f.write('''
from py2glsl.builtins import length, sin, vec2, vec4

def simple_shader(vs_uv: vec2, u_time: float, u_aspect: float) -> vec4:
    # A simple test shader
    uv = vs_uv * 2.0 - 1.0
    d = length(uv)
    color = sin(d * 10.0 - u_time * 2.0) * 0.5 + 0.5
    return vec4(color, color * 0.5, 1.0 - color, 1.0)
''')
        path = f.name

    yield path

    # Clean up the temporary file
    os.unlink(path)


def test_help():
    """Test that the CLI help command works."""
    result = runner.invoke(app, ["--help"])
    assert result.exit_code == 0
    assert "Transform Python functions into GLSL shaders" in result.stdout
    # Check new commands are listed
    assert "show" in result.stdout
    assert "watch" in result.stdout
    assert "render-image" in result.stdout
    assert "render-video" in result.stdout
    assert "render-gif" in result.stdout
    assert "export-code" in result.stdout


def test_show_help():
    """Test that the show command help works."""
    result = runner.invoke(app, ["show", "--help"])
    assert result.exit_code == 0
    assert "Display shader in an interactive window" in result.stdout


def test_watch_help():
    """Test that the watch command help works."""
    result = runner.invoke(app, ["watch", "--help"])
    assert result.exit_code == 0
    assert "Watch shader file and auto-reload on changes" in result.stdout


def test_render_image_help():
    """Test that the render-image command help works."""
    result = runner.invoke(app, ["render-image", "--help"])
    assert result.exit_code == 0
    assert "Render shader to static image file" in result.stdout


def test_render_video_help():
    """Test that the render-video command help works."""
    result = runner.invoke(app, ["render-video", "--help"])
    assert result.exit_code == 0
    assert "Render shader to video file" in result.stdout


def test_render_gif_help():
    """Test that the render-gif command help works."""
    result = runner.invoke(app, ["render-gif", "--help"])
    assert result.exit_code == 0
    assert "Render shader to animated GIF file" in result.stdout


def test_export_code_help():
    """Test that the export-code command help works."""
    result = runner.invoke(app, ["export-code", "--help"])
    assert result.exit_code == 0
    assert "Export shader to GLSL code file" in result.stdout


def test_export_code(sample_shader_file):
    """Test code export functionality with the new export-code command."""
    with TemporaryDirectory() as temp_dir:
        output_file = Path(temp_dir) / "output.glsl"

        # Test with different format options
        for format_opt in ["plain", "commented", "wrapped"]:
            result = runner.invoke(
                app, [
                    "export-code",
                    sample_shader_file,
                    str(output_file),
                    "--format", format_opt
                ]
            )

            assert result.exit_code == 0
            assert os.path.exists(output_file)

            # Check file content based on format
            with open(output_file) as f:
                content = f.read()

            if format_opt == "plain":
                assert "#version" in content
                assert "// Generated by py2glsl" not in content
            elif format_opt == "commented":
                assert "// Generated by py2glsl" in content
            elif format_opt == "wrapped" and "shadertoy" in content.lower():
                assert "/*" in content
                assert "*/" in content


@pytest.mark.gpu
def test_render_image_command(sample_shader_file):
    """Test rendering to image with render-image command."""
    with TemporaryDirectory() as temp_dir:
        output_file = Path(temp_dir) / "output.png"

        result = runner.invoke(
            app, [
                "render-image",
                sample_shader_file,
                str(output_file),
                "--width", "200",
                "--height", "200"
            ]
        )

        assert result.exit_code == 0
        assert os.path.exists(output_file)
        # Could add image verification here


@pytest.mark.gpu
def test_render_gif_command(sample_shader_file):
    """Test rendering to GIF with render-gif command."""
    with TemporaryDirectory() as temp_dir:
        output_file = Path(temp_dir) / "output.gif"

        result = runner.invoke(
            app, [
                "render-gif",
                sample_shader_file,
                str(output_file),
                "--width", "200",
                "--height", "200",
                "--fps", "10",
                "--duration", "0.5"  # Keep duration short for testing
            ]
        )

        assert result.exit_code == 0
        assert os.path.exists(output_file)
        # Could add GIF verification here


@pytest.mark.gpu
def test_render_video_command(sample_shader_file):
    """Test rendering to video with render-video command."""
    with TemporaryDirectory() as temp_dir:
        output_file = Path(temp_dir) / "output.mp4"

        result = runner.invoke(
            app, [
                "render-video",
                sample_shader_file,
                str(output_file),
                "--width", "200",
                "--height", "200",
                "--fps", "10",
                "--duration", "0.5",  # Keep duration short for testing
                "--codec", "h264"
            ]
        )

        assert result.exit_code == 0
        assert os.path.exists(output_file)
        # Could add video verification here


@pytest.mark.parametrize(
    "target_format",
    ["glsl", "shadertoy"]
)
def test_target_formats(sample_shader_file, target_format):
    """Test different target formats."""
    with TemporaryDirectory() as temp_dir:
        output_file = Path(temp_dir) / f"output_{target_format}.glsl"

        result = runner.invoke(
            app, [
                "export-code",
                sample_shader_file,
                str(output_file),
                "--target", target_format,
                "--format", "commented"
            ]
        )

        assert result.exit_code == 0
        assert os.path.exists(output_file)

        with open(output_file) as f:
            content = f.read()

        # Check target-specific content patterns
        if target_format == "shadertoy":
            # Shadertoy should have mainImage or the simple_shader function
            assert "mainImage" in content or "simple_shader" in content
        else:
            # Standard GLSL should have main or the simple_shader function
            assert "main" in content or "simple_shader" in content


def test_shadertoy_compatibility(sample_shader_file):
    """Test the shadertoy compatibility flag."""
    with TemporaryDirectory() as temp_dir:
        # Test with flag on
        compat_file = Path(temp_dir) / "shadertoy_compatible.glsl"
        result = runner.invoke(
            app, [
                "export-code",
                sample_shader_file,
                str(compat_file),
                "--target", "shadertoy",
                "--shadertoy-compatible"
            ]
        )

        assert result.exit_code == 0

        # Test with flag off
        regular_file = Path(temp_dir) / "shadertoy_regular.glsl"
        result = runner.invoke(
            app, [
                "export-code",
                sample_shader_file,
                str(regular_file),
                "--target", "shadertoy"
            ]
        )

        assert result.exit_code == 0

        # Compare files
        with open(compat_file) as f:
            compat_content = f.read()

        with open(regular_file) as f:
            regular_content = f.read()

        # Compatible version should not have these uniforms
        # (at least one should be missing)
        shadertoy_uniforms_missing = (
            "uniform vec3 iResolution;" not in compat_content or
            "uniform float iTime;" not in compat_content
        )
        assert shadertoy_uniforms_missing

        # Regular version should have at least some uniforms
        assert (
            "uniform vec3 iResolution;" in regular_content or
            "uniform float iTime;" in regular_content or
            "uniform" in regular_content
        )

        # Both should still have the mainImage function
        assert "mainImage" in compat_content
        assert "mainImage" in regular_content


@patch("py2glsl.main._get_transpiled_shader")
def test_error_handling(mock_transpile, sample_shader_file):
    """Test error handling in CLI."""
    # Simulate transpilation error
    mock_transpile.side_effect = ValueError("Test error")

    result = runner.invoke(
        app, [
            "export-code",
            sample_shader_file,
            "output.glsl"
        ]
    )

    # We only check that the exit code is non-zero, indicating an error
    assert result.exit_code != 0


def test_show_command(sample_shader_file):
    """Test the show command (partial test without actually showing GUI)."""
    # Since we can't test the actual UI, we'll just verify command execution
    # We mock to prevent actual execution
    with patch("py2glsl.main.animate") as mock_animate:
        result = runner.invoke(
            app, [
                "show",
                sample_shader_file,
                "--width", "200",
                "--height", "200"
            ]
        )
        # Command should execute successfully
        assert result.exit_code == 0
        # Animate should be called
        assert mock_animate.called


def test_watch_command(sample_shader_file):
    """Test the watch command (partial test without actually watching)."""
    # Since we can't test file watching easily, we'll just verify command execution
    # We need to patch both the Observer and the handler's run_shader method
    with patch("py2glsl.main.watchdog.observers.Observer") as mock_observer, \
         patch("py2glsl.main.ShaderChangeHandler") as mock_handler:
            # Make the handler's run_shader method return immediately
            mock_handler.return_value.run_shader.return_value = None

            result = runner.invoke(
                app, [
                    "watch",
                    sample_shader_file,
                    "--width", "200",
                    "--height", "200"
                ]
            )
            # Check if the command runs without errors
            assert result.exit_code == 0
            # Observer should be instantiated
            assert mock_observer.called
            # Handler should be instantiated
            assert mock_handler.called
