============================= test session starts ==============================
platform linux -- Python 3.13.1, pytest-8.3.4, pluggy-1.5.0 -- /home/akarnachev/proj/py2glsl/.venv/bin/python
cachedir: .pytest_cache
rootdir: /home/akarnachev/proj/py2glsl
configfile: pyproject.toml
plugins: asyncio-0.25.3, cov-6.0.0
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 117 items

tests/test_shader_basic.py::test_minimal_valid_shader FAILED             [  0%]
tests/test_shader_basic.py::test_simple_uniform FAILED                   [  1%]
tests/test_shader_basic.py::test_simple_variable FAILED                  [  2%]
tests/test_shader_basic.py::test_simple_arithmetic FAILED                [  3%]
tests/test_shader_basic.py::test_simple_vector_ops FAILED                [  4%]
tests/test_shader_basic.py::test_simple_if FAILED                        [  5%]
tests/test_shader_basic.py::test_simple_function FAILED                  [  5%]
tests/test_shader_basic.py::test_type_inference_simple FAILED            [  6%]
tests/test_shader_basic.py::test_swizzle_simple FAILED                   [  7%]
tests/test_shader_basic.py::test_builtin_simple FAILED                   [  8%]
tests/test_shader_basic.py::test_arithmetic FAILED                       [  9%]
tests/test_shader_complex.py::test_complex_shader_0 FAILED               [ 10%]
tests/test_shader_complex.py::test_complex_shader_1 FAILED               [ 11%]
tests/test_shader_complex.py::test_sdf_operations FAILED                 [ 11%]
tests/test_shader_complex.py::test_ray_marching FAILED                   [ 12%]
tests/test_shader_complex.py::test_complex_math FAILED                   [ 13%]
tests/test_shader_complex.py::test_complex_expressions FAILED            [ 14%]
tests/test_shader_control_flow.py::test_control_flow FAILED              [ 15%]
tests/test_shader_control_flow.py::test_nested_control_flow FAILED       [ 16%]
tests/test_shader_control_flow.py::test_nested_if_else FAILED            [ 17%]
tests/test_shader_control_flow.py::test_simple_for_loop FAILED           [ 17%]
tests/test_shader_control_flow.py::test_nested_for_loops FAILED          [ 18%]
tests/test_shader_control_flow.py::test_for_loop_with_range_start FAILED [ 19%]
tests/test_shader_control_flow.py::test_loop_bounds_integer FAILED       [ 20%]
tests/test_shader_control_flow.py::test_loop_bounds_float_error FAILED   [ 21%]
tests/test_shader_control_flow.py::test_loop_bounds_expression FAILED    [ 22%]
tests/test_shader_control_flow.py::test_integer_loop_counter FAILED      [ 23%]
tests/test_shader_errors.py::test_error_first_argument_name FAILED       [ 23%]
tests/test_shader_errors.py::test_error_messages FAILED                  [ 24%]
tests/test_shader_errors.py::test_bool_conversion FAILED                 [ 25%]
tests/test_shader_errors.py::test_integer_arithmetic FAILED              [ 26%]
tests/test_shader_errors.py::test_integer_vector_construction FAILED     [ 27%]
tests/test_shader_errors.py::test_integer_comparison FAILED              [ 28%]
tests/test_shader_errors.py::test_integer_function_params FAILED         [ 29%]
tests/test_shader_errors.py::test_integer_type_conversion FAILED         [ 29%]
tests/test_shader_errors.py::test_error_handling FAILED                  [ 30%]
tests/test_shader_function.py::test_nested_functions FAILED              [ 31%]
tests/test_shader_function.py::test_multiple_nested_functions FAILED     [ 32%]
tests/test_shader_function.py::test_function_return_type FAILED          [ 33%]
tests/test_shader_function.py::test_code_formatting FAILED               [ 34%]
tests/test_shader_function.py::test_function_calls_chain FAILED          [ 35%]
tests/test_shader_function.py::test_builtin_functions FAILED             [ 35%]
tests/test_shader_function.py::test_builtin_functions_chain FAILED       [ 36%]
tests/test_shader_glsl.py::test_glsl_syntax_validation FAILED            [ 37%]
tests/test_shader_glsl.py::test_shader_interface_validation FAILED       [ 38%]
tests/test_shader_glsl.py::test_shader_main_function FAILED              [ 39%]
tests/test_shader_glsl.py::test_code_formatting FAILED                   [ 40%]
tests/test_shader_glsl.py::test_code_formatting_style FAILED             [ 41%]
tests/test_shader_glsl.py::test_expression_grouping FAILED               [ 41%]
tests/test_shader_glsl.py::test_indentation_consistency FAILED           [ 42%]
tests/test_shader_glsl.py::test_parentheses_consistency FAILED           [ 43%]
tests/test_shader_glsl.py::test_precision_handling FAILED                [ 44%]
tests/test_shader_glsl.py::test_function_formatting FAILED               [ 45%]
tests/test_shader_hoisting.py::test_basic_variable_hoisting FAILED       [ 46%]
tests/test_shader_hoisting.py::test_if_scope_hoisting FAILED             [ 47%]
tests/test_shader_hoisting.py::test_loop_scope_hoisting FAILED           [ 47%]
tests/test_shader_hoisting.py::test_nested_scope_hoisting FAILED         [ 48%]
tests/test_shader_hoisting.py::test_multiple_variable_hoisting FAILED    [ 49%]
tests/test_shader_hoisting.py::test_function_scope_isolation FAILED      [ 50%]
tests/test_shader_hoisting.py::test_reused_variable_single_declaration FAILED [ 51%]
tests/test_shader_rendering.py::test_solid_color_render FAILED           [ 52%]
tests/test_shader_rendering.py::test_gradient_render FAILED              [ 52%]
tests/test_shader_rendering.py::test_integer_uniform_render FAILED       [ 53%]
tests/test_shader_rendering.py::test_uniform_values FAILED               [ 54%]
tests/test_shader_rendering.py::test_image_output FAILED                 [ 55%]
tests/test_shader_rendering.py::test_gif_animation FAILED                [ 56%]
tests/test_shader_rendering.py::test_video_output FAILED                 [ 57%]
tests/test_shader_rendering.py::test_resolution_uniform FAILED           [ 58%]
tests/test_shader_rendering.py::test_alpha_blending FAILED               [ 58%]
tests/test_shader_rendering.py::test_error_handling FAILED               [ 59%]
tests/test_shader_rendering.py::test_animation_frame_values FAILED       [ 60%]
tests/test_shader_rendering.py::test_animate_window PASSED               [ 61%]
tests/test_shader_types.py::test_type_inference FAILED                   [ 62%]
tests/test_shader_types.py::test_vector_operations_types FAILED          [ 63%]
tests/test_shader_types.py::test_math_function_types FAILED              [ 64%]
tests/test_shader_types.py::test_nested_function_types FAILED            [ 64%]
tests/test_shader_types.py::test_type_inference_complex FAILED           [ 65%]
tests/test_shader_types.py::test_type_inference_consistency FAILED       [ 66%]
tests/test_shader_types.py::test_builtin_function_types FAILED           [ 67%]
tests/test_shader_uniforms.py::test_uniforms FAILED                      [ 68%]
tests/test_shader_uniforms.py::test_multiple_uniforms FAILED             [ 69%]
tests/test_shader_uniforms.py::test_complex_uniforms FAILED              [ 70%]
tests/test_shader_uniforms.py::test_uniform_declaration_and_usage FAILED [ 70%]
tests/test_shader_uniforms.py::test_uniform_type_validation FAILED       [ 71%]
tests/test_shader_uniforms.py::test_integer_uniform_handling FAILED      [ 72%]
tests/test_shader_uniforms.py::test_mixed_uniform_types FAILED           [ 73%]
tests/test_shader_uniforms.py::test_integer_uniform_array FAILED         [ 74%]
tests/test_shader_variables.py::test_variables FAILED                    [ 75%]
tests/test_shader_variables.py::test_chained_assignments FAILED          [ 76%]
tests/test_shader_variables.py::test_compound_assignments FAILED         [ 76%]
tests/test_shader_variables.py::test_variable_scoping FAILED             [ 77%]
tests/test_shader_variables.py::test_variable_reuse FAILED               [ 78%]
tests/test_shader_variables.py::test_loop_variable_scope FAILED          [ 79%]
tests/test_shader_variables.py::test_nested_scope_variables FAILED       [ 80%]
tests/test_shader_variables.py::test_conditional_variable_initialization FAILED [ 81%]
tests/test_shader_variables.py::test_complex_scope_nesting FAILED        [ 82%]
tests/test_shader_variables.py::test_loop_variable_reuse FAILED          [ 82%]
tests/test_shader_vectors.py::test_vector_operations FAILED              [ 83%]
tests/test_shader_vectors.py::test_vector_constructors FAILED            [ 84%]
tests/test_shader_vectors.py::test_complex_swizzling FAILED              [ 85%]
tests/test_shader_vectors.py::test_swizzling FAILED                      [ 86%]
tests/test_shader_vectors.py::test_complex_vector_operations FAILED      [ 87%]
tests/test_shader_vectors.py::test_vector_swizzle_formatting FAILED      [ 88%]
tests/test_shader_vectors.py::test_vector_swizzle_type FAILED            [ 88%]
tests/test_shader_vectors.py::test_vector_type_hoisting FAILED           [ 89%]
tests/test_shader_vertex.py::test_vertex_shader_swizzle FAILED           [ 90%]
tests/test_shader_vertex.py::test_vertex_shader_precision FAILED         [ 91%]
tests/test_shader_vertex.py::test_vertex_shader_with_uniforms FAILED     [ 92%]
tests/test_shader_vertex.py::test_vertex_shader_function_params FAILED   [ 93%]
tests/test_shader_vertex.py::test_vertex_shader_complex_usage FAILED     [ 94%]
tests/test_shader_vertex.py::test_vertex_shader_resolution FAILED        [ 94%]
tests/test_shader_vertex.py::test_vertex_shader_time FAILED              [ 95%]
tests/test_shader_vertex.py::test_vertex_shader_mouse FAILED             [ 96%]
tests/test_shader_vertex.py::test_vertex_shader_input_attributes FAILED  [ 97%]
tests/test_shader_vertex.py::test_vertex_shader_coordinate_mapping FAILED [ 98%]
tests/test_shader_vertex.py::test_vertex_shader_interface FAILED         [ 99%]
tests/test_shader_vertex.py::test_vertex_shader_uv_usage FAILED          [100%]

=================================== FAILURES ===================================
__________________________ test_minimal_valid_shader ___________________________

    def test_minimal_valid_shader() -> None:
        def minimal_shader(vs_uv: vec2) -> vec4:
            return vec4(1.0, 0.0, 0.0, 1.0)
    
>       result = py2glsl(minimal_shader)

tests/test_shader_basic.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def minimal_shader(vs_uv: vec2) -> vec4:\n        return vec4(1.0, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def minimal_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_simple_uniform ______________________________

    def test_simple_uniform():
        """Test shader with single uniform"""
    
        def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:
            return vec4(color, 0.0, 0.0, 1.0)
    
>       result = py2glsl(uniform_shader)

tests/test_shader_basic.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:\n        return vec4(color, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_simple_variable _____________________________

    def test_simple_variable():
        """Test local variable declaration"""
    
        def var_shader(vs_uv: vec2) -> vec4:
            x = 1.0
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(var_shader)

tests/test_shader_basic.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def var_shader(vs_uv: vec2) -> vec4:\n        x = 1.0\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def var_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_simple_arithmetic ____________________________

    def test_simple_arithmetic():
        """Test basic arithmetic operations"""
    
        def math_shader(vs_uv: vec2) -> vec4:
            x = 1.0 + 2.0
            y = 3.0 * 4.0
            return vec4(x, y, 0.0, 1.0)
    
>       result = py2glsl(math_shader)

tests/test_shader_basic.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def math_shader(vs_uv: vec2) -> vec4:\n        x = 1.0 + 2.0\n        y = 3.0 * 4.0\n        return vec4(x, y, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def math_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_simple_vector_ops ____________________________

    def test_simple_vector_ops():
        """Test basic vector operations"""
    
        def vec_shader(vs_uv: vec2) -> vec4:
            v = vs_uv * 2.0
            return vec4(v, 0.0, 1.0)
    
>       result = py2glsl(vec_shader)

tests/test_shader_basic.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def vec_shader(vs_uv: vec2) -> vec4:\n        v = vs_uv * 2.0\n        return vec4(v, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def vec_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________________ test_simple_if ________________________________

    def test_simple_if():
        """Test simple if statement"""
    
        def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:
            if threshold > 0.5:
                return vec4(1.0, 0.0, 0.0, 1.0)
            return vec4(0.0, 1.0, 0.0, 1.0)
    
>       result = py2glsl(if_shader)

tests/test_shader_basic.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:\n        if threshold > 0.5:\n            return vec4(1.0, 0.0, 0.0, 1.0)\n        return vec4(0.0, 1.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_simple_function _____________________________

    def test_simple_function():
        """Test simple nested function"""
    
        def func_shader(vs_uv: vec2) -> vec4:
            def double(x: float) -> float:
                return x * 2.0
    
            val = double(0.5)
            return vec4(val, 0.0, 0.0, 1.0)
    
>       result = py2glsl(func_shader)

tests/test_shader_basic.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def func_shader(vs_uv: vec2) -> vec4:\n        def double(x: float) -> float:\n            return x * 2.0\n\n        val = double(0.5)\n        return vec4(val, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def func_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_type_inference_simple __________________________

    def test_type_inference_simple():
        """Test basic type inference"""
    
        def type_shader(vs_uv: vec2) -> vec4:
            a = 1.0  # float
            b = vs_uv  # vec2
            c = vec4(1.0, 2.0, 3.0, 4.0)  # vec4
            return c
    
>       result = py2glsl(type_shader)

tests/test_shader_basic.py:113: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def type_shader(vs_uv: vec2) -> vec4:\n        a = 1.0  # float\n        b = vs_uv  # vec2\n        c = vec4(1.0, 2.0, 3.0, 4.0)  # vec4\n        return c\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def type_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_swizzle_simple ______________________________

    def test_swizzle_simple():
        """Test basic swizzling operations"""
    
        def swizzle_shader(vs_uv: vec2) -> vec4:
            xy = vs_uv.xy
            yx = vs_uv.yx
            return vec4(xy.x, xy.y, yx.x, yx.y)
    
>       result = py2glsl(swizzle_shader)

tests/test_shader_basic.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def swizzle_shader(vs_uv: vec2) -> vec4:\n        xy = vs_uv.xy\n        yx = vs_uv.yx\n        return vec4(xy.x, xy.y, yx.x, yx.y)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def swizzle_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_builtin_simple ______________________________

    def test_builtin_simple():
        """Test basic built-in function usage"""
    
        def builtin_shader(vs_uv: vec2) -> vec4:
            l = length(vs_uv)
            n = normalize(vs_uv)
            return vec4(n, l, 1.0)
    
>       result = py2glsl(builtin_shader)

tests/test_shader_basic.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def builtin_shader(vs_uv: vec2) -> vec4:\n        l = length(vs_uv)\n        n = normalize(vs_uv)\n        return vec4(n, l, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def builtin_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_______________________________ test_arithmetic ________________________________

    def test_arithmetic() -> None:
        def math_shader(vs_uv: vec2) -> vec4:
            x = 1.0 + 2.0
            y = 3.0 * 4.0
            return vec4(x, y, 0.0, 1.0)
    
>       result = py2glsl(math_shader)

tests/test_shader_basic.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def math_shader(vs_uv: vec2) -> vec4:\n        x = 1.0 + 2.0\n        y = 3.0 * 4.0\n        return vec4(x, y, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def math_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_complex_shader_0 _____________________________

    def test_complex_shader_0() -> None:
        def shader(vs_uv: vec2, *, u_time: float) -> vec4:
            def sdf_circle(p: vec2, r: float) -> float:
                return length(p) - r
    
            p = vs_uv * 2.0 - 1.0
            d = sdf_circle(p, 0.5 + sin(u_time) * 0.3)
            color = vec3(1.0 - smoothstep(0.0, 0.01, d))
    
            return vec4(color, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_complex.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_time: float) -> vec4:\n        def sdf_circle(p: vec2, r: float) -> float:\n        ...p, 0.5 + sin(u_time) * 0.3)\n        color = vec3(1.0 - smoothstep(0.0, 0.01, d))\n\n        return vec4(color, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_time: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_complex_shader_1 _____________________________

    def test_complex_shader_1():
        """Test more complex shader with multiple features"""
    
        def complex_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
            # Center UV
            uv = vs_uv * 2.0 - 1.0
    
            # Create animated circle
            d = length(uv)
            radius = 0.3 + sin(u_time * 2.0) * 0.1
            circle = smoothstep(radius, radius - 0.01, d)
    
            # Animate color
            r = 0.5 + 0.5 * sin(u_time)
            g = 0.5 + 0.5 * sin(u_time + 2.094)
            b = 0.5 + 0.5 * sin(u_time + 4.189)
    
            return vec4(circle * r, circle * g, circle * b, circle)
    
        # Test static render
>       arr = render_array(complex_shader, size=(64, 64))

tests/test_shader_complex.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def complex_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:\n        # Center UV\n        uv = vs_uv * 2.0 -...094)\n        b = 0.5 + 0.5 * sin(u_time + 4.189)\n\n        return vec4(circle * r, circle * g, circle * b, circle)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def complex_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_sdf_operations ______________________________

    def test_sdf_operations() -> None:
        def shader(vs_uv: vec2, *, u_time: float) -> vec4:
            def sdf_circle(p: vec2, r: float) -> float:
                return length(p) - r
    
            def sdf_box(p: vec2, b: vec2) -> float:
                d = abs(p) - b
                return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0)
    
            def smooth_min(a: float, b: float, k: float) -> float:
                h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0)
                return mix(b, a, h) - k * h * (1.0 - h)
    
            p = vs_uv * 2.0 - 1.0
            circle_d = sdf_circle(p, 0.5)
            box_d = sdf_box(p, vec2(0.3, 0.3))
            d = smooth_min(circle_d, box_d, 0.2)
    
            return vec4(vec3(1.0 - smoothstep(0.0, 0.01, d)), 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_complex.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_time: float) -> vec4:\n        def sdf_circle(p: vec2, r: float) -> float:\n        ....3))\n        d = smooth_min(circle_d, box_d, 0.2)\n\n        return vec4(vec3(1.0 - smoothstep(0.0, 0.01, d)), 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_time: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________________ test_ray_marching _______________________________

    def test_ray_marching() -> None:
        def shader(vs_uv: vec2, *, u_camera: vec4) -> vec4:
            def sdf_scene(p: vec2) -> float:
                def repeat(p: vec2, size: float) -> vec2:
                    return p - size * floor(p / size)
    
                cell = repeat(p, 1.0)
                d1 = length(cell) - 0.3
                d2 = length(cell - 0.5) - 0.1
    
                return min(d1, d2)
    
            def ray_march(ro: vec2, rd: vec2) -> float:
                t = 0.0
                for i in range(64):
                    p = ro + rd * t
                    d = sdf_scene(p)
                    t += d
                    if d < 0.001:
                        break
                    if t > 10.0:
                        break
                return t
    
            p = vs_uv * 2.0 - 1.0
            ro = vec2(u_camera.x, u_camera.y)
            rd = normalize(p - ro)
    
            d = ray_march(ro, rd)
            fog = 1.0 / (1.0 + d * d * 0.1)
    
            return vec4(vec3(fog), 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_complex.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_camera: vec4) -> vec4:\n        def sdf_scene(p: vec2) -> float:\n            def re...ro)\n\n        d = ray_march(ro, rd)\n        fog = 1.0 / (1.0 + d * d * 0.1)\n\n        return vec4(vec3(fog), 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_camera: vec4) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________________ test_complex_math _______________________________

    def test_complex_math() -> None:
        def shader(vs_uv: vec2, *, u_time: float) -> vec4:
            def fbm(p: vec2) -> float:
                def noise(p: vec2) -> float:
                    i = floor(p)
                    f = p - i
                    u = f * f * (3.0 - 2.0 * f)
                    return mix(
                        mix(
                            dot(sin(i), vec2(12.9898, 78.233)),
                            dot(sin(i + vec2(1.0, 0.0)), vec2(12.9898, 78.233)),
                            u.x,
                        ),
                        mix(
                            dot(sin(i + vec2(0.0, 1.0)), vec2(12.9898, 78.233)),
                            dot(sin(i + vec2(1.0, 1.0)), vec2(12.9898, 78.233)),
                            u.x,
                        ),
                        u.y,
                    )
    
                value = 0.0
                amplitude = 0.5
                frequency = 1.0
    
                for i in range(6):
                    value += amplitude * noise(p * frequency)
                    frequency *= 2.0
                    amplitude *= 0.5
    
                return value
    
            p = vs_uv * 8.0
            p += u_time * 0.5
    
            value = fbm(p)
            color = mix(vec3(0.2, 0.3, 0.4), vec3(0.8, 0.7, 0.6), value)
    
            return vec4(color, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_complex.py:184: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_time: float) -> vec4:\n        def fbm(p: vec2) -> float:\n            def noise(p: ...ue = fbm(p)\n        color = mix(vec3(0.2, 0.3, 0.4), vec3(0.8, 0.7, 0.6), value)\n\n        return vec4(color, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_time: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_complex_expressions ___________________________

    def test_complex_expressions():
        """Test complex nested expressions"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = (1.0 + 2.0) * (3.0 - 4.0) / 2.0
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_complex.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = (1.0 + 2.0) * (3.0 - 4.0) / 2.0\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________________ test_control_flow _______________________________

    def test_control_flow() -> None:
        def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:
            if threshold > 0.5:
                return vec4(1.0, 0.0, 0.0, 1.0)
            return vec4(0.0, 1.0, 0.0, 1.0)
    
>       result = py2glsl(if_shader)

tests/test_shader_control_flow.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:\n        if threshold > 0.5:\n            return vec4(1.0, 0.0, 0.0, 1.0)\n        return vec4(0.0, 1.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_nested_control_flow ___________________________

    def test_nested_control_flow() -> None:
        def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:
            result = vec4(0.0)
            p = vs_uv * 2.0 - 1.0
    
            if length(p) < u_params.x:
                if p.x > 0.0:
                    if p.y > 0.0:
                        result = vec4(1.0, 0.0, 0.0, 1.0)
                    else:
                        result = vec4(0.0, 1.0, 0.0, 1.0)
                else:
                    result = vec4(0.0, 0.0, 1.0, 1.0)
            else:
                result = mix(vec4(0.5), vec4(u_params.y, u_params.z, u_params.w, 1.0), 0.5)
    
            return result
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:\n        result = vec4(0.0)\n        p = vs_uv * 2.0 - 1.0\n\...e:\n            result = mix(vec4(0.5), vec4(u_params.y, u_params.z, u_params.w, 1.0), 0.5)\n\n        return result\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_nested_if_else ______________________________

    def test_nested_if_else():
        """Test nested if-else structures"""
    
        def shader(vs_uv: vec2, *, x: float, y: float) -> vec4:
            if x > 0.0:
                if y > 0.0:
                    return vec4(1.0, 0.0, 0.0, 1.0)
                else:
                    return vec4(0.0, 1.0, 0.0, 1.0)
            return vec4(0.0, 0.0, 1.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, x: float, y: float) -> vec4:\n        if x > 0.0:\n            if y > 0.0:\n          ...0, 1.0)\n            else:\n                return vec4(0.0, 1.0, 0.0, 1.0)\n        return vec4(0.0, 0.0, 1.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, x: float, y: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_simple_for_loop _____________________________

    def test_simple_for_loop():
        """Test basic for loop with integer bounds"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 0.0
            for i in range(5):
                x += 1.0
            return vec4(x)
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 0.0\n        for i in range(5):\n            x += 1.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_nested_for_loops _____________________________

    def test_nested_for_loops():
        """Test nested for loops with integer bounds"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 0.0
            for i in range(3):
                for j in range(2):
                    x += 1.0
            return vec4(x)
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 0.0\n        for i in range(3):\n            for j in range(2):\n                x += 1.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_for_loop_with_range_start ________________________

    def test_for_loop_with_range_start():
        """Test for loop with start and end range"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 0.0
            for i in range(1, 4):
                x += 1.0
            return vec4(x)
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 0.0\n        for i in range(1, 4):\n            x += 1.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_loop_bounds_integer ___________________________

    def test_loop_bounds_integer():
        """Test that loop bounds remain integers"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 0.0
            for i in range(5):  # Simple integer bound
                x += 1.0
            return vec4(x)
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 0.0\n        for i in range(5):  # Simple integer bound\n            x += 1.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_loop_bounds_float_error _________________________

    def test_loop_bounds_float_error():
        """Test that float loop bounds raise error"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 0.0
            for i in range(5.0):  # Should raise error
                x += 1.0
            return vec4(x)
    
        with pytest.raises(ValueError, match="Loop bounds must be integers"):
>           py2glsl(shader)

tests/test_shader_control_flow.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 0.0\n        for i in range(5.0):  # Should raise error\n            x += 1.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_loop_bounds_expression __________________________

    def test_loop_bounds_expression():
        """Test loop bounds with expressions"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 0.0
            count = 3
            for i in range(count + 2):  # Expression that evaluates to integer
                x += 1.0
            return vec4(x)
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 0.0\n        count = 3\n        for i in range(count + 2):  # Expression that evaluates to integer\n            x += 1.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_integer_loop_counter ___________________________

    def test_integer_loop_counter():
        """Test integer loop counters"""
    
        def shader(vs_uv: vec2, *, count: int) -> vec4:
            x = 0.0
            for i in range(count):
                x += 1.0
            return vec4(x)
    
>       result = py2glsl(shader)

tests/test_shader_control_flow.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, count: int) -> vec4:\n        x = 0.0\n        for i in range(count):\n            x += 1.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, count: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_error_first_argument_name ________________________

    def test_error_first_argument_name():
        """Test error when first argument is not named vs_uv"""
        with pytest.raises(TypeError, match="First argument must be vs_uv"):
    
            def shader(pos: vec2, *, u_time: float) -> vec4:
                return vec4(1.0, 0.0, 0.0, 1.0)
    
>           py2glsl(shader)

tests/test_shader_errors.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '        def shader(pos: vec2, *, u_time: float) -> vec4:\n            return vec4(1.0, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(pos: vec2, *, u_time: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_error_messages ______________________________

    def test_error_messages():
        """Test specific error messages"""
    
        def shader1(pos: float) -> vec4:
            return vec4(1.0)
    
        def shader2(vs_uv: vec2) -> float:
            return 1.0
    
        def shader3(vs_uv: vec2, time: float) -> vec4:
            return vec4(1.0)
    
        with pytest.raises(TypeError, match="First argument must be vs_uv"):
>           py2glsl(shader1)

tests/test_shader_errors.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader1(pos: float) -> vec4:\n        return vec4(1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader1(pos: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_bool_conversion _____________________________

    def test_bool_conversion():
        """Test basic boolean literal conversion"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = True
            y = False
            return vec4(1.0)
    
>       result = py2glsl(shader)

tests/test_shader_errors.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = True\n        y = False\n        return vec4(1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_integer_arithmetic ____________________________

    def test_integer_arithmetic():
        """Test integer arithmetic operations"""
    
        def shader(vs_uv: vec2, *, frame: int) -> vec4:
            x = frame + 1
            y = frame * 2
            z = frame / 2  # Should convert to float
            return vec4(x, y, z, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_errors.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frame: int) -> vec4:\n        x = frame + 1\n        y = frame * 2\n        z = frame / 2  # Should convert to float\n        return vec4(x, y, z, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frame: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_______________________ test_integer_vector_construction _______________________

    def test_integer_vector_construction():
        """Test using integers in vector construction"""
    
        def shader(vs_uv: vec2, *, frame: int) -> vec4:
            return vec4(frame, frame + 1, frame * 2, 1)
    
>       result = py2glsl(shader)

tests/test_shader_errors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frame: int) -> vec4:\n        return vec4(frame, frame + 1, frame * 2, 1)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frame: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_integer_comparison ____________________________

    def test_integer_comparison():
        """Test integer comparisons"""
    
        def shader(vs_uv: vec2, *, frame: int) -> vec4:
            if frame > 5:
                return vec4(1.0)
            return vec4(0.0)
    
>       result = py2glsl(shader)

tests/test_shader_errors.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frame: int) -> vec4:\n        if frame > 5:\n            return vec4(1.0)\n        return vec4(0.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frame: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_integer_function_params _________________________

    def test_integer_function_params():
        """Test integer function parameters"""
    
        def shader(vs_uv: vec2, *, frame: int) -> vec4:
            def step(n: int) -> float:
                return float(n) / 10.0
    
            return vec4(step(frame))
    
>       result = py2glsl(shader)

tests/test_shader_errors.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frame: int) -> vec4:\n        def step(n: int) -> float:\n            return float(n) / 10.0\n\n        return vec4(step(frame))\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frame: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_integer_type_conversion _________________________

    def test_integer_type_conversion():
        """Test integer to float conversion"""
    
        def shader(vs_uv: vec2, *, frame: int) -> vec4:
            f = float(frame)  # Explicit conversion
            return vec4(f / 10.0)
    
>       result = py2glsl(shader)

tests/test_shader_errors.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frame: int) -> vec4:\n        f = float(frame)  # Explicit conversion\n        return vec4(f / 10.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frame: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_error_handling ______________________________

    def test_error_handling() -> None:
        with pytest.raises(TypeError, match="First argument must be vs_uv"):
    
            def invalid_shader1(pos: float, *, u_time: float) -> vec4:
                return vec4(1.0, 0.0, 0.0, 1.0)
    
>           py2glsl(invalid_shader1)

tests/test_shader_errors.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '        def invalid_shader1(pos: float, *, u_time: float) -> vec4:\n            return vec4(1.0, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def invalid_shader1(pos: float, *, u_time: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_nested_functions _____________________________

    def test_nested_functions() -> None:
        def func_shader(vs_uv: vec2) -> vec4:
            def double(x: float) -> float:
                return x * 2.0
    
            val = double(0.5)
            return vec4(val, 0.0, 0.0, 1.0)
    
>       result = py2glsl(func_shader)

tests/test_shader_function.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def func_shader(vs_uv: vec2) -> vec4:\n        def double(x: float) -> float:\n            return x * 2.0\n\n        val = double(0.5)\n        return vec4(val, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def func_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_multiple_nested_functions ________________________

    def test_multiple_nested_functions():
        """Test multiple nested function definitions"""
    
        def shader(vs_uv: vec2) -> vec4:
            def f1(x: float) -> float:
                return x * 2.0
    
            def f2(x: float) -> float:
                return f1(x) + 1.0
    
            val = f2(0.5)
            return vec4(val, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_function.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        def f1(x: float) -> float:\n            return x * 2.0\n\n        def f2(x: float) -> float:\n            return f1(x) + 1.0\n\n        val = f2(0.5)\n        return vec4(val, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_function_return_type ___________________________

    def test_function_return_type():
        """Test function return type preservation"""
    
        def shader(vs_uv: vec2) -> vec4:
            def get_normal(p: vec2) -> vec2:
                return normalize(p)
    
            n = get_normal(vs_uv)
            return vec4(n, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_function.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        def get_normal(p: vec2) -> vec2:\n            return normalize(p)\n\n        n = get_normal(vs_uv)\n        return vec4(n, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_code_formatting _____________________________

    def test_code_formatting():
        """Test consistent code formatting"""
    
        def shader(vs_uv: vec2) -> vec4:
            if length(vs_uv) > 1.0:
                return vec4(1.0)
            return vec4(0.0)
    
>       result = py2glsl(shader)

tests/test_shader_function.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        if length(vs_uv) > 1.0:\n            return vec4(1.0)\n        return vec4(0.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_function_calls_chain ___________________________

    def test_function_calls_chain():
        """Test chained function calls"""
    
        def shader(vs_uv: vec2) -> vec4:
            return vec4(normalize(abs(vs_uv * 2.0 - 1.0)), 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_function.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        return vec4(normalize(abs(vs_uv * 2.0 - 1.0)), 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_builtin_functions ____________________________

    def test_builtin_functions() -> None:
        def builtin_shader(vs_uv: vec2) -> vec4:
            l = length(vs_uv)
            n = normalize(vs_uv)
            return vec4(n, l, 1.0)
    
>       result = py2glsl(
            builtin_shader
        )  # Fixed: using builtin_shader instead of result_shader

tests/test_shader_function.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def builtin_shader(vs_uv: vec2) -> vec4:\n        l = length(vs_uv)\n        n = normalize(vs_uv)\n        return vec4(n, l, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def builtin_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_builtin_functions_chain _________________________

    def test_builtin_functions_chain():
        """Test chained built-in function calls"""
    
        def shader(vs_uv: vec2) -> vec4:
            v = normalize(abs(sin(vs_uv * 6.28318530718)))
            l = length(clamp(v, 0.0, 1.0))
            return vec4(v, l, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_function.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        v = normalize(abs(sin(vs_uv * 6.28318530718)))\n        l = length(clamp(v, 0.0, 1.0))\n        return vec4(v, l, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_glsl_syntax_validation __________________________

    def test_glsl_syntax_validation():
        """Test GLSL syntax validation"""
    
        def shader(vs_uv: vec2) -> vec4:
            render_called = True  # This should be converted to float/bool
            return vec4(1.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        render_called = True  # This should be converted to float/bool\n        return vec4(1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_______________________ test_shader_interface_validation _______________________

    def test_shader_interface_validation():
        """Test shader interface validation"""
    
        def shader(vs_uv: vec2) -> vec4:
            return vec4(vs_uv, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        return vec4(vs_uv, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_shader_main_function ___________________________

    def test_shader_main_function():
        """Test shader main function generation"""
    
        def shader(vs_uv: vec2) -> vec4:
            return vec4(1.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        return vec4(1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_code_formatting _____________________________

    def test_code_formatting():
        """Test consistent code formatting"""
    
        def shader(vs_uv: vec2) -> vec4:
            if length(vs_uv) > 1.0:
                return vec4(1.0)
            return vec4(0.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        if length(vs_uv) > 1.0:\n            return vec4(1.0)\n        return vec4(0.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_code_formatting_style __________________________

    def test_code_formatting_style():
        """Test GLSL code formatting rules"""
    
        def shader(vs_uv: vec2, *, u_val: float) -> vec4:
            if u_val > 0.0:
                return vec4(1.0)
            return vec4(0.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_val: float) -> vec4:\n        if u_val > 0.0:\n            return vec4(1.0)\n        return vec4(0.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_val: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_expression_grouping ___________________________

    def test_expression_grouping():
        """Test expression parentheses rules"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = vs_uv.x * 2.0 - 1.0
            y = (vs_uv.y * 2.0) - 1.0
            return vec4(x, y, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = vs_uv.x * 2.0 - 1.0\n        y = (vs_uv.y * 2.0) - 1.0\n        return vec4(x, y, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_indentation_consistency _________________________

    def test_indentation_consistency():
        """Test consistent indentation rules"""
    
        def shader(vs_uv: vec2, *, u_val: float) -> vec4:
            if u_val > 0.0:
                x = 1.0
                if u_val > 1.0:
                    x = 2.0
            return vec4(x)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_val: float) -> vec4:\n        if u_val > 0.0:\n            x = 1.0\n            if u_val > 1.0:\n                x = 2.0\n        return vec4(x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_val: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_parentheses_consistency _________________________

    def test_parentheses_consistency():
        """Test consistent parentheses in expressions"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = (1.0 + 2.0) * (3.0 - 4.0)
            y = vs_uv * 2.0 - 1.0
            return vec4(x, y, 0.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:142: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = (1.0 + 2.0) * (3.0 - 4.0)\n        y = vs_uv * 2.0 - 1.0\n        return vec4(x, y, 0.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_precision_handling ____________________________

    def test_precision_handling():
        """Test numerical precision handling in shaders"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 0.0  # Should be exactly 0.0
            y = 1.0  # Should be exactly 1.0
            return vec4(x, y, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 0.0  # Should be exactly 0.0\n        y = 1.0  # Should be exactly 1.0\n        return vec4(x, y, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_function_formatting ___________________________

    def test_function_formatting():
        """Test function declaration formatting"""
    
        def shader(vs_uv: vec2) -> vec4:
            def helper(x: float) -> float:
                return x * 2.0
    
            return vec4(helper(vs_uv.x))
    
>       result = py2glsl(shader)

tests/test_shader_glsl.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        def helper(x: float) -> float:\n            return x * 2.0\n\n        return vec4(helper(vs_uv.x))\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_basic_variable_hoisting _________________________

    def test_basic_variable_hoisting():
        """Test basic variable hoisting at function scope"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 1.0
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_hoisting.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 1.0\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_if_scope_hoisting ____________________________

    def test_if_scope_hoisting():
        """Test variable hoisting from if statements"""
    
        def shader(vs_uv: vec2) -> vec4:
            if vs_uv.x > 0.5:
                x = 1.0
            else:
                x = 0.0
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_hoisting.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        if vs_uv.x > 0.5:\n            x = 1.0\n        else:\n            x = 0.0\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_loop_scope_hoisting ___________________________

    def test_loop_scope_hoisting():
        """Test variable hoisting from loop scope"""
    
        def shader(vs_uv: vec2) -> vec4:
            sum = 0.0
            for i in range(4):
                x = float(i)
                sum += x
            return vec4(sum, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_hoisting.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        sum = 0.0\n        for i in range(4):\n            x = float(i)\n            sum += x\n        return vec4(sum, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_nested_scope_hoisting __________________________

    def test_nested_scope_hoisting():
        """Test hoisting with nested scopes"""
    
        def shader(vs_uv: vec2) -> vec4:
            if vs_uv.x > 0.5:
                x = 1.0
                if vs_uv.y > 0.5:
                    y = 2.0
                    x = y
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_hoisting.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        if vs_uv.x > 0.5:\n            x = 1.0\n            if vs_uv.y > 0.5:\n                y = 2.0\n                x = y\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_______________________ test_multiple_variable_hoisting ________________________

    def test_multiple_variable_hoisting():
        """Test hoisting of multiple variables"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 1.0
            y = 2.0
            v2 = vec2(x, y)
            v3 = vec3(v2, 3.0)
            return vec4(v3, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_hoisting.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 1.0\n        y = 2.0\n        v2 = vec2(x, y)\n        v3 = vec3(v2, 3.0)\n        return vec4(v3, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_function_scope_isolation _________________________

    def test_function_scope_isolation():
        """Test variable isolation between functions"""
    
        def shader(vs_uv: vec2) -> vec4:
            def func1() -> float:
                x = 1.0  # Should be isolated
                return x
    
            def func2() -> float:
                x = 2.0  # Different x
                return x
    
            return vec4(func1() + func2(), 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_hoisting.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        def func1() -> float:\n            x = 1.0  # Should be isolated\n     ...:\n            x = 2.0  # Different x\n            return x\n\n        return vec4(func1() + func2(), 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________ test_reused_variable_single_declaration ____________________

    def test_reused_variable_single_declaration():
        """Test that reused variables are only declared once"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = 1.0
            x = 2.0  # Reuse
            x = 3.0  # Reuse again
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_hoisting.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 1.0\n        x = 2.0  # Reuse\n        x = 3.0  # Reuse again\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_solid_color_render ____________________________

    def test_solid_color_render():
        """Test rendering solid color"""
    
        def red_shader(vs_uv: vec2) -> vec4:
            return vec4(1.0, 0.0, 0.0, 1.0)
    
        # Test array output
>       arr = render_array(red_shader, size=(64, 64))

tests/test_shader_rendering.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def red_shader(vs_uv: vec2) -> vec4:\n        return vec4(1.0, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def red_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_gradient_render _____________________________

    def test_gradient_render():
        """Test rendering horizontal gradient"""
    
        def gradient_shader(vs_uv: vec2) -> vec4:
            return vec4(vs_uv.x, 0.0, 0.0, 1.0)
    
>       arr = render_array(gradient_shader, size=(64, 64))

tests/test_shader_rendering.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def gradient_shader(vs_uv: vec2) -> vec4:\n        return vec4(vs_uv.x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def gradient_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_integer_uniform_render __________________________

    def test_integer_uniform_render():
        """Test integer uniform rendering"""
    
        def shader(vs_uv: vec2, *, u_value: int) -> vec4:
            return vec4(float(u_value) / 255.0, 0.0, 0.0, 1.0)  # Normalize to [0,1]
    
        for i in range(5):
>           arr = render_array(shader, size=(1, 1), u_value=i)

tests/test_shader_rendering.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_value: int) -> vec4:\n        return vec4(float(u_value) / 255.0, 0.0, 0.0, 1.0)  # Normalize to [0,1]\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_value: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_uniform_values ______________________________

    def test_uniform_values():
        """Test uniform parameter passing"""
    
        def color_shader(vs_uv: vec2, *, u_color: vec4) -> vec4:
            return u_color
    
>       arr = render_array(color_shader, size=(64, 64), u_color=(0.0, 1.0, 0.0, 1.0))

tests/test_shader_rendering.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def color_shader(vs_uv: vec2, *, u_color: vec4) -> vec4:\n        return u_color\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def color_shader(vs_uv: vec2, *, u_color: vec4) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________________ test_image_output _______________________________

    def test_image_output():
        """Test PIL Image output"""
    
        def blue_shader(vs_uv: vec2) -> vec4:
            return vec4(0.0, 0.0, 1.0, 1.0)
    
>       img = render_image(blue_shader, size=(64, 64))

tests/test_shader_rendering.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:105: in render_image
    data = render_array(shader_func, size, **uniforms)
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def blue_shader(vs_uv: vec2) -> vec4:\n        return vec4(0.0, 0.0, 1.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def blue_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________________ test_gif_animation ______________________________

temp_dir = PosixPath('/tmp/pytest-of-akarnachev/pytest-17/test_gif_animation0')

    def test_gif_animation(temp_dir):
        """Test GIF animation rendering"""
    
        def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
            return vec4(sin(u_time) * 0.5 + 0.5, 0.0, 0.0, 1.0)
    
        output_path = temp_dir / "test.gif"
>       render_gif(time_shader, str(output_path), duration=1.0, fps=10, size=(32, 32))

tests/test_shader_rendering.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:148: in render_gif
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:\n        return vec4(sin(u_time) * 0.5 + 0.5, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________________ test_video_output _______________________________

temp_dir = PosixPath('/tmp/pytest-of-akarnachev/pytest-17/test_video_output0')

    def test_video_output(temp_dir):
        """Test video rendering"""
    
        def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
            return vec4(0.0, sin(u_time) * 0.5 + 0.5, 0.0, 1.0)
    
        output_path = temp_dir / "test.mp4"
>       render_video(time_shader, str(output_path), duration=1.0, fps=10, size=(32, 32))

tests/test_shader_rendering.py:126: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:240: in render_video
    frame_data = render_array(shader_func, size=size, **frame_uniforms)
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:\n        return vec4(0.0, sin(u_time) * 0.5 + 0.5, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_resolution_uniform ____________________________

    def test_resolution_uniform():
        """Test u_resolution uniform"""
    
        def resolution_shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:
            return vec4(u_resolution.x / 100.0, u_resolution.y / 100.0, 0.0, 1.0)
    
>       arr = render_array(resolution_shader, size=(50, 25))

tests/test_shader_rendering.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def resolution_shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:\n        return vec4(u_resolution.x / 100.0, u_resolution.y / 100.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def resolution_shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_alpha_blending ______________________________

    def test_alpha_blending():
        """Test alpha channel handling"""
    
        def alpha_shader(vs_uv: vec2) -> vec4:
            return vec4(1.0, 1.0, 1.0, vs_uv.x)
    
>       arr = render_array(alpha_shader, size=(64, 64))

tests/test_shader_rendering.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def alpha_shader(vs_uv: vec2) -> vec4:\n        return vec4(1.0, 1.0, 1.0, vs_uv.x)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def alpha_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_error_handling ______________________________

    def test_error_handling():
        """Test error cases"""
    
        # Test invalid shader function
        def invalid_shader(vs_uv: vec2) -> vec3:  # Wrong return type
            return vec3(1.0, 0.0, 0.0)
    
        with pytest.raises(TypeError):
>           render_array(invalid_shader)

tests/test_shader_rendering.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def invalid_shader(vs_uv: vec2) -> vec3:  # Wrong return type\n        return vec3(1.0, 0.0, 0.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def invalid_shader(vs_uv: vec2) -> vec3:  # Wrong return type
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_animation_frame_values __________________________

    def test_animation_frame_values():
        """Test animation frame counting and timing"""
    
        def capture_shader(vs_uv: vec2, *, u_time: float = 0.0, u_frame: int = 0) -> vec4:
            return vec4(float(u_frame) / 255.0, u_time, 0.0, 1.0)  # Normalize frame number
    
        for frame in range(10):
            time = frame / 10.0
>           arr = render_array(capture_shader, size=(1, 1), u_time=time, u_frame=frame)

tests/test_shader_rendering.py:193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/render.py:57: in render_array
    shader_result = py2glsl(shader_func)
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def capture_shader(vs_uv: vec2, *, u_time: float = 0.0, u_frame: int = 0) -> vec4:\n        return vec4(float(u_frame) / 255.0, u_time, 0.0, 1.0)  # Normalize frame number\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def capture_shader(vs_uv: vec2, *, u_time: float = 0.0, u_frame: int = 0) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_type_inference ______________________________

    def test_type_inference() -> None:
        def type_shader(vs_uv: vec2) -> vec4:
            a = 1.0
            b = vs_uv
            c = vec4(1.0, 2.0, 3.0, 4.0)
            return c
    
>       result = py2glsl(type_shader)

tests/test_shader_types.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def type_shader(vs_uv: vec2) -> vec4:\n        a = 1.0\n        b = vs_uv\n        c = vec4(1.0, 2.0, 3.0, 4.0)\n        return c\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def type_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_vector_operations_types _________________________

    def test_vector_operations_types():
        """Test vector operation type preservation"""
    
        def shader(vs_uv: vec2) -> vec4:
            v2 = vec2(1.0, 2.0)
            v3 = vec3(v2, 3.0)
            v4 = vec4(v3, 1.0)
            scaled = v2 * 2.0  # Should stay vec2
            added = v2 + v2  # Should stay vec2
            return v4
    
>       result = py2glsl(shader)

tests/test_shader_types.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        v2 = vec2(1.0, 2.0)\n        v3 = vec3(v2, 3.0)\n        v4 = vec4(v3, 1.0)\n        scaled = v2 * 2.0  # Should stay vec2\n        added = v2 + v2  # Should stay vec2\n        return v4\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_math_function_types ___________________________

    def test_math_function_types():
        """Test math function type preservation"""
    
        def shader(vs_uv: vec2) -> vec4:
            angle = atan(vs_uv.y, vs_uv.x)  # float
            s = sin(angle)  # float
            c = cos(angle)  # float
            return vec4(s, c, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_types.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        angle = atan(vs_uv.y, vs_uv.x)  # float\n        s = sin(angle)  # float\n        c = cos(angle)  # float\n        return vec4(s, c, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_nested_function_types __________________________

    def test_nested_function_types():
        """Test nested function type preservation"""
    
        def shader(vs_uv: vec2) -> vec4:
            def circle_sdf(p: vec2, r: float) -> float:
                return length(p) - r
    
            def smooth_min(a: float, b: float, k: float) -> float:
                h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0)
                return mix(b, a, h) - k * h * (1.0 - h)
    
            d = circle_sdf(vs_uv, 0.5)
            s = smooth_min(d, 0.0, 0.1)
            return vec4(s)
    
>       result = py2glsl(shader)

tests/test_shader_types.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        def circle_sdf(p: vec2, r: float) -> float:\n            return length(...k * h * (1.0 - h)\n\n        d = circle_sdf(vs_uv, 0.5)\n        s = smooth_min(d, 0.0, 0.1)\n        return vec4(s)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_type_inference_complex __________________________

    def test_type_inference_complex():
        """Test complex type inference scenarios"""
    
        def shader(vs_uv: vec2, *, scale: float) -> vec4:
            # Type should be inferred from operations
            a = vs_uv * scale  # vec2
            b = vs_uv.x * scale  # float
            c = normalize(a)  # vec2
            d = length(a)  # float
            return vec4(c, b, d)
    
>       result = py2glsl(shader)

tests/test_shader_types.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, scale: float) -> vec4:\n        # Type should be inferred from operations\n        a =...v.x * scale  # float\n        c = normalize(a)  # vec2\n        d = length(a)  # float\n        return vec4(c, b, d)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, scale: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_______________________ test_type_inference_consistency ________________________

    def test_type_inference_consistency():
        """Test consistent type inference"""
    
        def shader(vs_uv: vec2, *, u_dir: vec2) -> vec4:
            n = normalize(u_dir)  # Should stay vec2
            d = dot(n, vs_uv)  # Should be float
            return vec4(d)
    
>       result = py2glsl(shader)

tests/test_shader_types.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_dir: vec2) -> vec4:\n        n = normalize(u_dir)  # Should stay vec2\n        d = dot(n, vs_uv)  # Should be float\n        return vec4(d)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_dir: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_builtin_function_types __________________________

    def test_builtin_function_types():
        """Test built-in function type inference"""
    
        def shader(vs_uv: vec2) -> vec4:
            d = length(vs_uv)  # float
            n = normalize(vs_uv)  # vec2
            m = mix(vec3(1), vec3(0), 0.5)  # vec3
            return vec4(d, n, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_types.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        d = length(vs_uv)  # float\n        n = normalize(vs_uv)  # vec2\n        m = mix(vec3(1), vec3(0), 0.5)  # vec3\n        return vec4(d, n, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________________ test_uniforms _________________________________

    def test_uniforms() -> None:
        def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:
            return vec4(color, 0.0, 0.0, 1.0)
    
>       result = py2glsl(uniform_shader)

tests/test_shader_uniforms.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:\n        return vec4(color, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_multiple_uniforms ____________________________

    def test_multiple_uniforms():
        """Test multiple uniforms with different types"""
    
        def shader(vs_uv: vec2, *, scale: float, offset: vec2, color: vec4) -> vec4:
            return color * vec4(vs_uv * scale + offset, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_uniforms.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, scale: float, offset: vec2, color: vec4) -> vec4:\n        return color * vec4(vs_uv * scale + offset, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, scale: float, offset: vec2, color: vec4) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_complex_uniforms _____________________________

    def test_complex_uniforms() -> None:
        def shader(
            vs_uv: vec2,
            *,
            u_time: float,
            u_resolution: vec2,
            u_mouse: vec2,
            u_color1: vec4,
            u_color2: vec4,
            u_params: vec4,
        ) -> vec4:
            aspect = u_resolution.x / u_resolution.y
            p = vs_uv * 2.0 - 1.0
            p.x *= aspect
    
            mouse = u_mouse * 2.0 - 1.0
            mouse.x *= aspect
    
            d = length(p - mouse)
            glow = 0.02 / d
    
            color = mix(
                u_color1,
                u_color2,
                smoothstep(
                    u_params.x, u_params.y, sin(d * u_params.z + u_time * u_params.w)
                ),
            )
    
            return color * glow
    
>       result = py2glsl(shader)

tests/test_shader_uniforms.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(\n        vs_uv: vec2,\n        *,\n        u_time: float,\n        u_resolution: vec2,\n        u_mou...s.x, u_params.y, sin(d * u_params.z + u_time * u_params.w)\n            ),\n        )\n\n        return color * glow\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________ test_uniform_declaration_and_usage ______________________

    def test_uniform_declaration_and_usage():
        """Test uniform declaration and usage in shaders"""
    
        def shader(vs_uv: vec2, *, u_time: float, u_resolution: vec2) -> vec4:
            return vec4(u_time, u_resolution.x, u_resolution.y, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_uniforms.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_time: float, u_resolution: vec2) -> vec4:\n        return vec4(u_time, u_resolution.x, u_resolution.y, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_time: float, u_resolution: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_uniform_type_validation _________________________

    def test_uniform_type_validation():
        """Test uniform type validation"""
    
        def shader(vs_uv: vec2, *, u_float: float, u_vec2: vec2, u_vec4: vec4) -> vec4:
            return u_vec4
    
>       result = py2glsl(shader)

tests/test_shader_uniforms.py:104: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_float: float, u_vec2: vec2, u_vec4: vec4) -> vec4:\n        return u_vec4\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_float: float, u_vec2: vec2, u_vec4: vec4) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_integer_uniform_handling _________________________

    def test_integer_uniform_handling():
        """Test integer uniform type preservation"""
    
        def shader(vs_uv: vec2, *, frame: int) -> vec4:
            return vec4(frame, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_uniforms.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frame: int) -> vec4:\n        return vec4(frame, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frame: int) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_mixed_uniform_types ___________________________

    def test_mixed_uniform_types():
        """Test handling of mixed integer and float uniforms"""
    
        def shader(vs_uv: vec2, *, frame: int, time: float) -> vec4:
            return vec4(frame, time, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_uniforms.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frame: int, time: float) -> vec4:\n        return vec4(frame, time, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frame: int, time: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_integer_uniform_array __________________________

    def test_integer_uniform_array():
        """Test integer uniform arrays"""
    
        def shader(vs_uv: vec2, *, frames: vec3) -> vec4:
            return vec4(frames.x, frames.y, frames.z, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_uniforms.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, frames: vec3) -> vec4:\n        return vec4(frames.x, frames.y, frames.z, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, frames: vec3) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________________ test_variables ________________________________

    def test_variables() -> None:
        def var_shader(vs_uv: vec2) -> vec4:
            x = 1.0
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(var_shader)

tests/test_shader_variables.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def var_shader(vs_uv: vec2) -> vec4:\n        x = 1.0\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def var_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_chained_assignments ___________________________

    def test_chained_assignments():
        """Test chained assignments"""
    
        def shader(vs_uv: vec2) -> vec4:
            x = y = z = 1.0
            return vec4(x, y, z, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = y = z = 1.0\n        return vec4(x, y, z, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_compound_assignments ___________________________

    def test_compound_assignments() -> None:
        def shader(vs_uv: vec2) -> vec4:
            x = 1.0
            x += 2.0
            x *= 3.0
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        x = 1.0\n        x += 2.0\n        x *= 3.0\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_variable_scoping _____________________________

    def test_variable_scoping():
        """Test variable scoping and redeclaration in different blocks"""
    
        def shader(vs_uv: vec2) -> vec4:
            if length(vs_uv) > 0.5:
                x = 1.0
            else:
                x = 0.0
            return vec4(x, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        if length(vs_uv) > 0.5:\n            x = 1.0\n        else:\n            x = 0.0\n        return vec4(x, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________________ test_variable_reuse ______________________________

    def test_variable_reuse():
        """Test reusing variable names in different blocks"""
    
        def shader(vs_uv: vec2) -> vec4:
            local_uv = vs_uv * 2.0 - 1.0
            if length(local_uv) > 0.5:
                local_uv = local_uv * 0.5  # Reuse variable
            return vec4(local_uv, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        local_uv = vs_uv * 2.0 - 1.0\n        if length(local_uv) > 0.5:\n            local_uv = local_uv * 0.5  # Reuse variable\n        return vec4(local_uv, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_loop_variable_scope ___________________________

    def test_loop_variable_scope():
        """Test loop variable scoping"""
    
        def shader(vs_uv: vec2) -> vec4:
            sum = 0.0
            for i in range(4):
                x = float(i) * 0.25  # New variable in loop
                sum += x
            return vec4(sum, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        sum = 0.0\n        for i in range(4):\n            x = float(i) * 0.25  # New variable in loop\n            sum += x\n        return vec4(sum, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_nested_scope_variables __________________________

    def test_nested_scope_variables():
        """Test variables in nested scopes"""
    
        def shader(vs_uv: vec2) -> vec4:
            color = vec3(0.0)
            if length(vs_uv) > 0.5:
                factor = 1.0
                if vs_uv.x > 0.0:
                    factor = 2.0
                color = vec3(factor)
            return vec4(color, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        color = vec3(0.0)\n        if length(vs_uv) > 0.5:\n            factor ...  if vs_uv.x > 0.0:\n                factor = 2.0\n            color = vec3(factor)\n        return vec4(color, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________ test_conditional_variable_initialization ___________________

    def test_conditional_variable_initialization():
        """Test variables that are conditionally initialized"""
    
        def shader(vs_uv: vec2) -> vec4:
            if vs_uv.x > 0.5:
                color = vec3(1.0, 0.0, 0.0)
            else:
                color = vec3(0.0, 1.0, 0.0)
            return vec4(color, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        if vs_uv.x > 0.5:\n            color = vec3(1.0, 0.0, 0.0)\n        else:\n            color = vec3(0.0, 1.0, 0.0)\n        return vec4(color, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_complex_scope_nesting __________________________

    def test_complex_scope_nesting():
        """Test complex nested scopes with multiple variables"""
    
        def shader(vs_uv: vec2) -> vec4:
            d = length(vs_uv)
            if d < 0.5:
                color = vec3(1.0)
                if vs_uv.x > 0.0:
                    factor = 0.5
                    color = color * factor
                else:
                    factor = 0.25
                    color = color * factor
            else:
                color = vec3(0.0)
                factor = 0.1
                color = color + factor
            return vec4(color, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        d = length(vs_uv)\n        if d < 0.5:\n            color = vec3(1.0)\n...    color = vec3(0.0)\n            factor = 0.1\n            color = color + factor\n        return vec4(color, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_loop_variable_reuse ___________________________

    def test_loop_variable_reuse():
        """Test reusing variables across multiple loops"""
    
        def shader(vs_uv: vec2) -> vec4:
            sum = 0.0
            for i in range(4):
                val = float(i) * 0.25
                sum += val
            for i in range(2):
                val = float(i) * 0.5
                sum += val
            return vec4(sum, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_variables.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        sum = 0.0\n        for i in range(4):\n            val = float(i) * 0.2...or i in range(2):\n            val = float(i) * 0.5\n            sum += val\n        return vec4(sum, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_vector_operations ____________________________

    def test_vector_operations() -> None:
        def vec_shader(vs_uv: vec2) -> vec4:
            v = vs_uv * 2.0
            return vec4(v, 0.0, 1.0)
    
>       result = py2glsl(vec_shader)

tests/test_shader_vectors.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def vec_shader(vs_uv: vec2) -> vec4:\n        v = vs_uv * 2.0\n        return vec4(v, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def vec_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_vector_constructors ___________________________

    def test_vector_constructors():
        """Test different vector construction patterns"""
    
        def shader(vs_uv: vec2) -> vec4:
            v2a = vec2(1.0, 2.0)
            v2b = vec2(v2a.x)  # same value
            v3a = vec3(v2a, 3.0)
            v3b = vec3(1.0)  # all same
            v4a = vec4(v3a, 1.0)
            v4b = vec4(v2a, v2b)
            return v4a + v4b
    
>       result = py2glsl(shader)

tests/test_shader_vectors.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        v2a = vec2(1.0, 2.0)\n        v2b = vec2(v2a.x)  # same value\n        ...   v3b = vec3(1.0)  # all same\n        v4a = vec4(v3a, 1.0)\n        v4b = vec4(v2a, v2b)\n        return v4a + v4b\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________________ test_complex_swizzling ____________________________

    def test_complex_swizzling():
        """Test complex swizzling operations"""
    
        def shader(vs_uv: vec2) -> vec4:
            v4 = vec4(vs_uv, 0.0, 1.0)
            xyz = v4.xyz
            zyx = v4.zyx
            return vec4(xyz.xy, zyx.xy)
    
>       result = py2glsl(shader)

tests/test_shader_vectors.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        v4 = vec4(vs_uv, 0.0, 1.0)\n        xyz = v4.xyz\n        zyx = v4.zyx\n        return vec4(xyz.xy, zyx.xy)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________________ test_swizzling ________________________________

    def test_swizzling() -> None:
        def swizzle_shader(vs_uv: vec2) -> vec4:
            xy = vs_uv.xy
            yx = vs_uv.yx
            return vec4(xy.x, xy.y, yx.x, yx.y)
    
>       result = py2glsl(swizzle_shader)

tests/test_shader_vectors.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def swizzle_shader(vs_uv: vec2) -> vec4:\n        xy = vs_uv.xy\n        yx = vs_uv.yx\n        return vec4(xy.x, xy.y, yx.x, yx.y)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def swizzle_shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_complex_vector_operations ________________________

    def test_complex_vector_operations() -> None:
        def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:
            def polar(p: vec2) -> vec2:
                return vec2(length(p), atan(p.y, p.x))
    
            def cartesian(p: vec2) -> vec2:
                return vec2(p.x * cos(p.y), p.x * sin(p.y))
    
            p = vs_uv * 2.0 - 1.0
            pol = polar(p)
            pol.y += u_params.z * pol.x + u_params.w
            p = cartesian(pol)
    
            return vec4(normalize(p), length(p), 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vectors.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:\n        def polar(p: vec2) -> vec2:\n            return vec2... += u_params.z * pol.x + u_params.w\n        p = cartesian(pol)\n\n        return vec4(normalize(p), length(p), 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_vector_swizzle_formatting ________________________

    def test_vector_swizzle_formatting():
        """Test vector swizzle formatting"""
    
        def shader(vs_uv: vec2) -> vec4:
            v = vec4(vs_uv.xy, 0.0, 1.0)
            return v.rgba
    
>       result = py2glsl(shader)

tests/test_shader_vectors.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        v = vec4(vs_uv.xy, 0.0, 1.0)\n        return v.rgba\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_vector_swizzle_type ___________________________

    def test_vector_swizzle_type():
        """Test vector swizzling with correct type inference"""
    
        def shader(vs_uv: vec2) -> vec4:
            v4 = vec4(1.0, 2.0, 3.0, 4.0)
            rgb = v4.rgb  # Should be vec3
            xy = v4.xy  # Should be vec2
            x = v4.x  # Should be float
            return vec4(x, xy, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vectors.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        v4 = vec4(1.0, 2.0, 3.0, 4.0)\n        rgb = v4.rgb  # Should be vec3\n        xy = v4.xy  # Should be vec2\n        x = v4.x  # Should be float\n        return vec4(x, xy, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_vector_type_hoisting ___________________________

    def test_vector_type_hoisting():
        """Test hoisting of vector type variables"""
    
        def shader(vs_uv: vec2) -> vec4:
            if vs_uv.x > 0.5:
                pos = vec2(1.0, 2.0)
            else:
                pos = vec2(0.0, 0.0)
            return vec4(pos, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vectors.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        if vs_uv.x > 0.5:\n            pos = vec2(1.0, 2.0)\n        else:\n            pos = vec2(0.0, 0.0)\n        return vec4(pos, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
__________________________ test_vertex_shader_swizzle __________________________

    def test_vertex_shader_swizzle():
        """Test vs_uv swizzling operations"""
    
        def shader(vs_uv: vec2) -> vec4:
            xy = vs_uv.xy
            yx = vs_uv.yx
            return vec4(xy.x, xy.y, yx.x, yx.y)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        xy = vs_uv.xy\n        yx = vs_uv.yx\n        return vec4(xy.x, xy.y, yx.x, yx.y)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_vertex_shader_precision _________________________

    def test_vertex_shader_precision():
        """Test precision handling with vs_uv coordinates"""
    
        def shader(vs_uv: vec2) -> vec4:
            uv = vs_uv * 2.0 - 1.0  # Convert [0,1] to [-1,1]
            return vec4(uv, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        uv = vs_uv * 2.0 - 1.0  # Convert [0,1] to [-1,1]\n        return vec4(uv, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_______________________ test_vertex_shader_with_uniforms _______________________

    def test_vertex_shader_with_uniforms():
        """Test vs_uv interaction with uniforms"""
    
        def shader(vs_uv: vec2, *, u_scale: float) -> vec4:
            pos = vs_uv * u_scale
            return vec4(pos, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_scale: float) -> vec4:\n        pos = vs_uv * u_scale\n        return vec4(pos, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_scale: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
______________________ test_vertex_shader_function_params ______________________

    def test_vertex_shader_function_params():
        """Test vs_uv usage in function parameters"""
    
        def shader(vs_uv: vec2) -> vec4:
            def transform(p: vec2) -> vec2:
                return p * 2.0 - 1.0
    
            pos = transform(vs_uv)
            return vec4(pos, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        def transform(p: vec2) -> vec2:\n            return p * 2.0 - 1.0\n\n        pos = transform(vs_uv)\n        return vec4(pos, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_______________________ test_vertex_shader_complex_usage _______________________

    def test_vertex_shader_complex_usage():
        """Test complex vs_uv manipulations"""
    
        def shader(vs_uv: vec2) -> vec4:
            def polar(p: vec2) -> vec2:
                return vec2(length(p), atan(p.y, p.x))
    
            center = vs_uv * 2.0 - 1.0
            polar_coords = polar(center)
            return vec4(polar_coords, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        def polar(p: vec2) -> vec2:\n            return vec2(length(p), atan(p....       center = vs_uv * 2.0 - 1.0\n        polar_coords = polar(center)\n        return vec4(polar_coords, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
________________________ test_vertex_shader_resolution _________________________

    def test_vertex_shader_resolution():
        """Test vs_uv with resolution uniform"""
    
        def shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:
            aspect = u_resolution.x / u_resolution.y
            pos = vs_uv
            pos.x *= aspect
            return vec4(pos, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:\n        aspect = u_resolution.x / u_resolution.y\n        pos = vs_uv\n        pos.x *= aspect\n        return vec4(pos, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_vertex_shader_time ____________________________

    def test_vertex_shader_time():
        """Test vs_uv with time-based animation"""
    
        def shader(vs_uv: vec2, *, u_time: float) -> vec4:
            pos = vs_uv * 2.0 - 1.0
            angle = u_time
            x = pos.x * cos(angle) - pos.y * sin(angle)
            y = pos.x * sin(angle) + pos.y * cos(angle)
            return vec4(x, y, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_time: float) -> vec4:\n        pos = vs_uv * 2.0 - 1.0\n        angle = u_time\n    ...ngle) - pos.y * sin(angle)\n        y = pos.x * sin(angle) + pos.y * cos(angle)\n        return vec4(x, y, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_time: float) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
___________________________ test_vertex_shader_mouse ___________________________

    def test_vertex_shader_mouse():
        """Test vs_uv with mouse interaction"""
    
        def shader(vs_uv: vec2, *, u_mouse: vec2) -> vec4:
            dist = length(vs_uv - u_mouse)
            glow = 0.1 / (dist + 0.1)
            return vec4(glow, glow, glow, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2, *, u_mouse: vec2) -> vec4:\n        dist = length(vs_uv - u_mouse)\n        glow = 0.1 / (dist + 0.1)\n        return vec4(glow, glow, glow, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2, *, u_mouse: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_____________________ test_vertex_shader_input_attributes ______________________

    def test_vertex_shader_input_attributes():
        """Test vertex shader input attribute declarations"""
    
        def shader(vs_uv: vec2) -> vec4:
            return vec4(1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        return vec4(1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
____________________ test_vertex_shader_coordinate_mapping _____________________

    def test_vertex_shader_coordinate_mapping():
        """Test vertex shader coordinate mapping"""
    
        def shader(vs_uv: vec2) -> vec4:
            # Map [0,1] to [-1,1]
            pos = vs_uv * 2.0 - 1.0
            return vec4(pos, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        # Map [0,1] to [-1,1]\n        pos = vs_uv * 2.0 - 1.0\n        return vec4(pos, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_vertex_shader_interface _________________________

    def test_vertex_shader_interface():
        """Test vertex shader interface generation"""
    
        def shader(vs_uv: vec2) -> vec4:
            return vec4(1.0, 0.0, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        return vec4(1.0, 0.0, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
_________________________ test_vertex_shader_uv_usage __________________________

    def test_vertex_shader_uv_usage():
        """Test proper vs_uv usage in shader"""
    
        def shader(vs_uv: vec2) -> vec4:
            return vec4(vs_uv.x, vs_uv.y, 0.0, 1.0)
    
>       result = py2glsl(shader)

tests/test_shader_vertex.py:176: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
py2glsl/transpiler/__init__.py:58: in py2glsl
    analysis = analyzer.analyze(func)
py2glsl/transpiler/analyzer.py:118: in analyze
    tree = ast.parse(source)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

source = '    def shader(vs_uv: vec2) -> vec4:\n        return vec4(vs_uv.x, vs_uv.y, 0.0, 1.0)\n'
filename = '<unknown>', mode = 'exec'

    def parse(source, filename='<unknown>', mode='exec', *,
              type_comments=False, feature_version=None, optimize=-1):
        """
        Parse the source into an AST node.
        Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
        Pass type_comments=True to get back type comments where the syntax allows.
        """
        flags = PyCF_ONLY_AST
        if optimize > 0:
            flags |= PyCF_OPTIMIZED_AST
        if type_comments:
            flags |= PyCF_TYPE_COMMENTS
        if feature_version is None:
            feature_version = -1
        elif isinstance(feature_version, tuple):
            major, minor = feature_version  # Should be a 2-tuple.
            if major != 3:
                raise ValueError(f"Unsupported major version: {major}")
            feature_version = minor
        # Else it should be an int giving the minor version for 3.x.
>       return compile(source, filename, mode, flags,
                       _feature_version=feature_version, optimize=optimize)
E         File "<unknown>", line 1
E           def shader(vs_uv: vec2) -> vec4:
E       IndentationError: unexpected indent

../../.local/share/uv/python/cpython-3.13.1-linux-x86_64-gnu/lib/python3.13/ast.py:54: IndentationError
=========================== short test summary info ============================
FAILED tests/test_shader_basic.py::test_minimal_valid_shader -   File "<unknown>", line 1
    def minimal_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_simple_uniform -   File "<unknown>", line 1
    def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_simple_variable -   File "<unknown>", line 1
    def var_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_simple_arithmetic -   File "<unknown>", line 1
    def math_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_simple_vector_ops -   File "<unknown>", line 1
    def vec_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_simple_if -   File "<unknown>", line 1
    def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_simple_function -   File "<unknown>", line 1
    def func_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_type_inference_simple -   File "<unknown>", line 1
    def type_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_swizzle_simple -   File "<unknown>", line 1
    def swizzle_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_builtin_simple -   File "<unknown>", line 1
    def builtin_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_basic.py::test_arithmetic -   File "<unknown>", line 1
    def math_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_complex.py::test_complex_shader_0 -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_time: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_complex.py::test_complex_shader_1 -   File "<unknown>", line 1
    def complex_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_complex.py::test_sdf_operations -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_time: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_complex.py::test_ray_marching -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_camera: vec4) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_complex.py::test_complex_math -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_time: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_complex.py::test_complex_expressions -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_control_flow -   File "<unknown>", line 1
    def if_shader(vs_uv: vec2, *, threshold: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_nested_control_flow -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_nested_if_else -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, x: float, y: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_simple_for_loop -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_nested_for_loops -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_for_loop_with_range_start -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_loop_bounds_integer -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_loop_bounds_float_error -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_loop_bounds_expression -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_control_flow.py::test_integer_loop_counter -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, count: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_error_first_argument_name -   File "<unknown>", line 1
    def shader(pos: vec2, *, u_time: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_error_messages -   File "<unknown>", line 1
    def shader1(pos: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_bool_conversion -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_integer_arithmetic -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frame: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_integer_vector_construction -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frame: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_integer_comparison -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frame: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_integer_function_params -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frame: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_integer_type_conversion -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frame: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_errors.py::test_error_handling -   File "<unknown>", line 1
    def invalid_shader1(pos: float, *, u_time: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_function.py::test_nested_functions -   File "<unknown>", line 1
    def func_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_function.py::test_multiple_nested_functions -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_function.py::test_function_return_type -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_function.py::test_code_formatting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_function.py::test_function_calls_chain -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_function.py::test_builtin_functions -   File "<unknown>", line 1
    def builtin_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_function.py::test_builtin_functions_chain -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_glsl_syntax_validation -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_shader_interface_validation -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_shader_main_function -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_code_formatting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_code_formatting_style -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_val: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_expression_grouping -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_indentation_consistency -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_val: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_parentheses_consistency -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_precision_handling -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_glsl.py::test_function_formatting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_hoisting.py::test_basic_variable_hoisting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_hoisting.py::test_if_scope_hoisting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_hoisting.py::test_loop_scope_hoisting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_hoisting.py::test_nested_scope_hoisting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_hoisting.py::test_multiple_variable_hoisting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_hoisting.py::test_function_scope_isolation -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_hoisting.py::test_reused_variable_single_declaration -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_solid_color_render -   File "<unknown>", line 1
    def red_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_gradient_render -   File "<unknown>", line 1
    def gradient_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_integer_uniform_render -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_value: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_uniform_values -   File "<unknown>", line 1
    def color_shader(vs_uv: vec2, *, u_color: vec4) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_image_output -   File "<unknown>", line 1
    def blue_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_gif_animation -   File "<unknown>", line 1
    def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_video_output -   File "<unknown>", line 1
    def time_shader(vs_uv: vec2, *, u_time: float = 0.0) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_resolution_uniform -   File "<unknown>", line 1
    def resolution_shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_alpha_blending -   File "<unknown>", line 1
    def alpha_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_error_handling -   File "<unknown>", line 1
    def invalid_shader(vs_uv: vec2) -> vec3:  # Wrong return type
IndentationError: unexpected indent
FAILED tests/test_shader_rendering.py::test_animation_frame_values -   File "<unknown>", line 1
    def capture_shader(vs_uv: vec2, *, u_time: float = 0.0, u_frame: int = 0) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_types.py::test_type_inference -   File "<unknown>", line 1
    def type_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_types.py::test_vector_operations_types -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_types.py::test_math_function_types -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_types.py::test_nested_function_types -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_types.py::test_type_inference_complex -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, scale: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_types.py::test_type_inference_consistency -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_dir: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_types.py::test_builtin_function_types -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_uniforms -   File "<unknown>", line 1
    def uniform_shader(vs_uv: vec2, *, color: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_multiple_uniforms -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, scale: float, offset: vec2, color: vec4) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_complex_uniforms -   File "<unknown>", line 1
    def shader(
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_uniform_declaration_and_usage -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_time: float, u_resolution: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_uniform_type_validation -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_float: float, u_vec2: vec2, u_vec4: vec4) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_integer_uniform_handling -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frame: int) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_mixed_uniform_types -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frame: int, time: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_uniforms.py::test_integer_uniform_array -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, frames: vec3) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_variables -   File "<unknown>", line 1
    def var_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_chained_assignments -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_compound_assignments -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_variable_scoping -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_variable_reuse -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_loop_variable_scope -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_nested_scope_variables -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_conditional_variable_initialization -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_complex_scope_nesting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_variables.py::test_loop_variable_reuse -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_vector_operations -   File "<unknown>", line 1
    def vec_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_vector_constructors -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_complex_swizzling -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_swizzling -   File "<unknown>", line 1
    def swizzle_shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_complex_vector_operations -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_params: vec4) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_vector_swizzle_formatting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_vector_swizzle_type -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vectors.py::test_vector_type_hoisting -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_swizzle -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_precision -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_with_uniforms -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_scale: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_function_params -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_complex_usage -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_resolution -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_resolution: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_time -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_time: float) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_mouse -   File "<unknown>", line 1
    def shader(vs_uv: vec2, *, u_mouse: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_input_attributes -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_coordinate_mapping -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_interface -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
FAILED tests/test_shader_vertex.py::test_vertex_shader_uv_usage -   File "<unknown>", line 1
    def shader(vs_uv: vec2) -> vec4:
IndentationError: unexpected indent
======================== 116 failed, 1 passed in 3.39s =========================
